# ******************************************************************************
# Generic Makefile to inlcude in project Makefile.
# ******************************************************************************

# Set compiler to some standard values if not set
CC ?= gcc
CXX ?= g++
AS ?= gcc
AR ?= ar
OBJDUMP ?= objdump
OBJCOPY ?= objcopy
SIZE ?= size
STRIP ?= strip
LDFLAGS ?= ${CFLAGS}
CFLAGS := -D_FORTIFY_SOURCE=2 -fstack-protector-strong -flto -fdiagnostics-color=auto ${CFLAGS}
CXXFLAGS := -D_FORTIFY_SOURCE=2 -fstack-protector-strong -flto -fdiagnostics-color=auto ${CXXFLAGS}

# Determine if project is written in c or c++ by looking at the suffix of the
# main source file
ifeq ($(suffix $(word 1, ${SOURCES})),.cpp)
   LD ?= g++
else
   LD ?= gcc
endif

# Filename for linker map file
LD_MAP=linker.map

OBJECTS = $(addprefix ${BUILDDIR}, $(addsuffix .o, $(basename ${SOURCES})))
TARGET_ELF = $(addprefix ${BUILDDIR}, $(addsuffix .elf, $(word 1, $(basename ${SOURCES}))))
TARGET_BIN = $(addprefix ${BUILDDIR}, $(addsuffix .bin, $(word 1, $(basename ${SOURCES}))))

all: ${TARGET_ELF} ${EXT_TARGS}

-include $(OBJECTS:.o=.d)

debug: CXXFLAGS += -O0 -g -p -U_FORTIFY_SOURCE
debug: CFLAGS += -O0 -g -p -U_FORTIFY_SOURCE
debug: LDFLAGS += -g -Wl,-Map,${LD_MAP}
debug: ${TARGET_ELF}

verbose: CXXFLAGS+=-DVERBOSE
verbose: CFLAGS+=-DVERBOSE
verbose: ${TARGET_ELF}

coverage: CFLAGS+=-fprofile-arcs -ftest-coverage
coverage: CXXFLAGS+=-fprofile-arcs -ftest-coverage
coverage: ${TARGET_ELF}

ifdef V
   quiet =
   Q =
else
   quiet = quiet_
   Q = @
endif

cc_c_o = ${CC} -c ${CFLAGS} ${SYMBOLS} -MMD -MP -o $@ $<
quiet_cc_c_o = CC $@
cc_S_o = ${CC} -c ${ASFLAGS} ${SYMBOLS} -MMD -MP -o $@ $<
cc_s_o = ${CC} -c ${ASFLAGS} -o $@ $<
quiet_cc_s_o = AS $@
quiet_cc_S_o = ${quiet_cc_s_o}
cxx_cpp_o = ${CXX} -c ${CXXFLAGS} ${SYMBOLS} -MMD -MP -o $@ $<
quiet_cxx_cpp_o = CXX $@
ld_o_elf = ${LD} ${LDFLAGS} -o $@ $(OBJECTS) ${LDLIBS}
quiet_ld_o_elf = LD $@
strip_elf = ${STRIP} ${STRIPFLAGS} $<
quiet_strip_elf = STRIP $<
size_elf = ${SIZE} ${SIZEFLAGS} $<
quiet_size_elf = SIZE $<

${BUILDDIR}%.o: ${SRCDIR}%.S | ${BUILDDIR}
	@echo "$(${quiet}cc_S_o)"
	@${call cc_S_o}

${BUILDDIR}%.o: ${SRCDIR}%.s | ${BUILDDIR}
	@echo "$(${quiet}cc_s_o)"
	@${call cc_s_o}

${BUILDDIR}%.o: ${SRCDIR}%.c | ${BUILDDIR}
	@echo "$(${quiet}cc_c_o)"
	@${call cc_c_o}

${BUILDDIR}%.o: ${SRCDIR}%.cpp | ${BUILDDIR}
	@echo "$(${quiet}cxx_cpp_o)"
	@${call cxx_cpp_o}

${BUILDDIR}%.elf: ${BUILDDIR}%.o ${OBJECTS}
	@echo "$(${quiet}ld_o_elf)"
	@${call ld_o_elf}

${BUILDDIR}:
	mkdir -p $@

.PHONY: strip
strip: ${TARGET_ELF}
	@echo "$(${quiet}strip_elf)"
	@${call strip_elf}

.PHONY: size
size: ${TARGET_ELF}
	@echo "$(${quiet}size_elf)"
	@${call size_elf}

.PHONY: clean
clean:
	rm -f $(BUILDDIR)*.o $(BUILDDIR)*.d $(BUILDDIR)*.bin \
	      $(BUILDDIR)linker.map $(BUILDDIR)*.out $(BUILDDIR)dump \
	      $(BUILDDIR)*.elf $(BUILDDIR)*.gcov $(BUILDDIR)*.gcno \
	      $(BUILDDIR)*.gcda ${EXT_TARGS} ${EXT_CLEAN} $(SRCDIR)*~

.PHONY: distclean
distclean: clean
	rm -rf $(BUILDDIR)

.PHONY: war
war:
	@echo "No! Make love not war!"

.PHONY: love
love:
	@echo "Sorry, I'm just a dumb machine"
